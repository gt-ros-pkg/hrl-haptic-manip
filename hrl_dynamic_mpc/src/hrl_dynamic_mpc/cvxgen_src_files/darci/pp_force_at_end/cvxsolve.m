% Produced by CVXGEN, 2014-01-13 17:28:29 -0500.
% CVXGEN is Copyright (C) 2006-2012 Jacob Mattingley, jem@cvxgen.com.
% The code in this file is Copyright (C) 2006-2012 Jacob Mattingley.
% CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial
% applications without prior written permission from Jacob Mattingley.

% Filename: cvxsolve.m.
% Description: Solution file, via cvx, for use with sample.m.
function [vars, status] = cvxsolve(params, settings)
A_bl = params.A_bl;
A_br = params.A_br;
A_tl = params.A_tl;
A_tr = params.A_tr;
B_b1 = params.B_b1;
B_b2 = params.B_b2;
B_b3 = params.B_b3;
B_t1 = params.B_t1;
B_t2 = params.B_t2;
B_t3 = params.B_t3;
J = params.J;
Kd = params.Kd;
Kp = params.Kp;
alpha = params.alpha;
beta = params.beta;
delta_f_max = params.delta_f_max;
delta_q_des = params.delta_q_des;
delta_x_des = params.delta_x_des;
kappa = params.kappa;
mass = params.mass;
mu = params.mu;
n_K_J_all = params.n_K_J_all;
posture_weight = params.posture_weight;
q_0 = params.q_0;
q_des_cur_0 = params.q_des_cur_0;
q_max = params.q_max;
q_min = params.q_min;
qd_0 = params.qd_0;
tau_cont_sum_0 = params.tau_cont_sum_0;
tau_max_delta_t = params.tau_max_delta_t;
torque_max = params.torque_max;
torque_min = params.torque_min;
xyz_weight = params.xyz_weight;
zeta = params.zeta;
cvx_begin
  % Caution: automatically generated by cvxgen. May be incorrect.
  variable qd_1(7, 1);
  variable qd_2(7, 1);
  variable qd_3(7, 1);
  variable q_6(7, 1);
  variable u_0(7, 1);
  variable u_1(7, 1);
  variable u_2(7, 1);
  variable q_1(7, 1);
  variable q_des_cur_1(7, 1);
  variable q_2(7, 1);
  variable q_des_cur_2(7, 1);
  variable q_3(7, 1);
  variable qd_4(7, 1);
  variable q_des_cur_3(7, 1);
  variable qd_5(7, 1);
  variable q_4(7, 1);
  variable qd_6(7, 1);
  variable q_5(7, 1);

  minimize(kappa*(sum(pos(abs(2*mass*qd_1) - tau_max_delta_t)) + sum(pos(abs(2*mass*qd_2) - tau_max_delta_t)) + sum(pos(abs(2*mass*qd_3) - tau_max_delta_t))) + alpha*posture_weight*quad_form(delta_q_des - (q_6 - q_0), eye(7)) + xyz_weight*zeta*quad_form(delta_x_des - J*(q_6 - q_0), eye(3)) + mu*(quad_form(u_0, eye(7)) + quad_form(u_1, eye(7)) + quad_form(u_2, eye(7))) + beta*sum(pos(n_K_J_all*(q_6 - q_0) - delta_f_max)));
  subject to
    qd_1 == A_tl*qd_0 + A_tr*q_0 + B_t1*(q_des_cur_0 + u_0) + B_t2*tau_cont_sum_0 + B_t3*q_0;
    qd_2 == A_tl*qd_1 + A_tr*q_1 + B_t1*(q_des_cur_1 + u_1) + B_t2*tau_cont_sum_0 + B_t3*q_0;
    qd_3 == A_tl*qd_2 + A_tr*q_2 + B_t1*(q_des_cur_2 + u_2) + B_t2*tau_cont_sum_0 + B_t3*q_0;
    q_1 == A_bl*qd_0 + A_br*q_0 + B_b1*(q_des_cur_0 + u_0) + B_b2*tau_cont_sum_0 + B_b3*q_0;
    q_2 == A_bl*qd_1 + A_br*q_1 + B_b1*(q_des_cur_1 + u_1) + B_b2*tau_cont_sum_0 + B_b3*q_0;
    q_3 == A_bl*qd_2 + A_br*q_2 + B_b1*(q_des_cur_2 + u_2) + B_b2*tau_cont_sum_0 + B_b3*q_0;
    qd_4 == A_tl*qd_3 + A_tr*q_3 + B_t1*q_des_cur_3 + B_t2*tau_cont_sum_0 + B_t3*q_0;
    qd_5 == A_tl*qd_4 + A_tr*q_4 + B_t1*q_des_cur_3 + B_t2*tau_cont_sum_0 + B_t3*q_0;
    qd_6 == A_tl*qd_5 + A_tr*q_5 + B_t1*q_des_cur_3 + B_t2*tau_cont_sum_0 + B_t3*q_0;
    q_4 == A_bl*qd_3 + A_br*q_3 + B_b1*q_des_cur_3 + B_b2*tau_cont_sum_0 + B_b3*q_0;
    q_5 == A_bl*qd_4 + A_br*q_4 + B_b1*q_des_cur_3 + B_b2*tau_cont_sum_0 + B_b3*q_0;
    q_6 == A_bl*qd_5 + A_br*q_5 + B_b1*q_des_cur_3 + B_b2*tau_cont_sum_0 + B_b3*q_0;
    q_des_cur_1 == q_des_cur_0 + u_0;
    q_des_cur_2 == q_des_cur_1 + u_1;
    q_des_cur_3 == q_des_cur_2 + u_2;
    q_min <= q_1;
    q_min <= q_2;
    q_min <= q_3;
    q_min <= q_4;
    q_min <= q_5;
    q_min <= q_6;
    q_1 <= q_max;
    q_2 <= q_max;
    q_3 <= q_max;
    q_4 <= q_max;
    q_5 <= q_max;
    q_6 <= q_max;
    torque_min <= Kp*(q_des_cur_0 + u_0 - q_0) - Kd*qd_0;
    torque_min <= Kp*(q_des_cur_1 + u_1 - q_1) - Kd*qd_1;
    torque_min <= Kp*(q_des_cur_2 + u_2 - q_2) - Kd*qd_2;
    Kp*(q_des_cur_0 + u_0 - q_0) - Kd*qd_0 <= torque_max;
    Kp*(q_des_cur_1 + u_1 - q_1) - Kd*qd_1 <= torque_max;
    Kp*(q_des_cur_2 + u_2 - q_2) - Kd*qd_2 <= torque_max;
cvx_end
vars.q_1 = q_1;
vars.q{1} = q_1;
vars.q_2 = q_2;
vars.q{2} = q_2;
vars.q_3 = q_3;
vars.q{3} = q_3;
vars.q_4 = q_4;
vars.q{4} = q_4;
vars.q_5 = q_5;
vars.q{5} = q_5;
vars.q_6 = q_6;
vars.q{6} = q_6;
vars.q_des_cur_1 = q_des_cur_1;
vars.q_des_cur{1} = q_des_cur_1;
vars.q_des_cur_2 = q_des_cur_2;
vars.q_des_cur{2} = q_des_cur_2;
vars.q_des_cur_3 = q_des_cur_3;
vars.q_des_cur{3} = q_des_cur_3;
vars.qd_1 = qd_1;
vars.qd{1} = qd_1;
vars.qd_2 = qd_2;
vars.qd{2} = qd_2;
vars.qd_3 = qd_3;
vars.qd{3} = qd_3;
vars.qd_4 = qd_4;
vars.qd{4} = qd_4;
vars.qd_5 = qd_5;
vars.qd{5} = qd_5;
vars.qd_6 = qd_6;
vars.qd{6} = qd_6;
vars.u_0 = u_0;
vars.u_1 = u_1;
vars.u{1} = u_1;
vars.u_2 = u_2;
vars.u{2} = u_2;
status.cvx_status = cvx_status;
% Provide a drop-in replacement for csolve.
status.optval = cvx_optval;
status.converged = strcmp(cvx_status, 'Solved');
